@page "/admin/categories/edit/{id:long}"
@page "/admin/categories/create"
@inherits OwningComponentBase<IChinilkaRepository>

<h3 class="bg-@ThemeColor text-white text-center p-1">@Mode a Category</h3>
<EditForm Model="Category" OnValidSubmit="UdateCategoryAsync">
    <DataAnnotationsValidator />
    @if (Mode == "Edit")
    {
        <div class="form-group">
            <label>ID</label>
            <input class="form-control" disabled value="@Category.Id" />
        </div>
    }
    <div class="form-group">
        <label>Название</label>
        <ValidationMessage For="@(() => Category.Name)" />
        <InputText class="form-control" @bind-Value="Category.Name" />
    </div>
    <div class="form-group">
        <label>Описание</label>
        <ValidationMessage For="@(() => Category.Description)" />
        <InputText class="form-control" @bind-Value="Category.Description" />
    </div>
    <div class="mt-2">
        <button type="submit" class="btn btn-@ThemeColor">Сохранить</button>
        <NavLink class="btn btn-secondary" href="/admin/products">Отмена</NavLink>
    </div>
</EditForm>
@code {
    public IChinilkaRepository Repository => Service;

    [Inject]
    public NavigationManager? NavManager { get; set; }

    [Parameter]
    public long Id { get; set; } = 0;

    public Category Category { get; set; } = new();

    protected async override Task OnParametersSetAsync()
    {
        if (Mode == "Edit")
        {
            Category = await Repository.Categories.FirstAsync(p => p.Id == Id) ?? new();
        }
    }

    public async Task UdateCategoryAsync()
    {
        if (Id == 0)
        {
            await Repository.CreateCategory(Category);
        }
        else
        {
            await Repository.UpdateCategory(Category);
        }
        NavManager?.NavigateTo("/admin/categories");
    }

    public string ThemeColor => Id == 0 ? "primary" : "warning";
    public string Mode => Id == 0 ? "Create" : "Edit";
}
